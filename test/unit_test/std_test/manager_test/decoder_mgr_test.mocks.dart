// Mocks generated by Mockito 5.4.4 from annotations
// in simple_webdav_client/test/unit_test/std_test/manager_test/decoder_mgr_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_webdav_client/src/_std/decoder.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeStreamTransformer_0<S, T> extends _i1.SmartFake
    implements _i2.StreamTransformer<S, T> {
  _FakeStreamTransformer_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ResponseBodyDecoder].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseBodyDecoder extends _i1.Mock
    implements _i3.ResponseBodyDecoder {
  MockResponseBodyDecoder() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Stream<String> bind(_i2.Stream<List<int>>? stream) => (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i2.Stream<String>.empty(),
      ) as _i2.Stream<String>);

  @override
  _i2.StreamTransformer<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeStreamTransformer_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.StreamTransformer<RS, RT>);
}
