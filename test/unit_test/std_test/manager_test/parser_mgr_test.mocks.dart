// Mocks generated by Mockito 5.4.4 from annotations
// in simple_webdav_client/test/unit_test/std_test/manager_test/parser_mgr_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;
import 'dart:convert' as _i6;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:simple_webdav_client/src/_std/error.dart' as _i16;
import 'package:simple_webdav_client/src/_std/parser.dart' as _i15;
import 'package:simple_webdav_client/src/_std/resource.dart' as _i14;
import 'package:simple_webdav_client/src/response.dart' as _i17;
import 'package:xml/src/xml/entities/entity_mapping.dart' as _i11;
import 'package:xml/src/xml/enums/node_type.dart' as _i7;
import 'package:xml/src/xml/nodes/attribute.dart' as _i8;
import 'package:xml/src/xml/nodes/element.dart' as _i5;
import 'package:xml/src/xml/nodes/node.dart' as _i3;
import 'package:xml/src/xml/utils/name.dart' as _i2;
import 'package:xml/src/xml/utils/node_list.dart' as _i4;
import 'package:xml/src/xml/utils/predicate.dart' as _i12;
import 'package:xml/src/xml/visitors/visitor.dart' as _i10;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeXmlName_0 extends _i1.SmartFake implements _i2.XmlName {
  _FakeXmlName_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeXmlNodeList_1<E extends _i3.XmlNode> extends _i1.SmartFake
    implements _i4.XmlNodeList<E> {
  _FakeXmlNodeList_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeXmlElement_2 extends _i1.SmartFake implements _i5.XmlElement {
  _FakeXmlElement_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConverter_3<S1, T1> extends _i1.SmartFake
    implements _i6.Converter<S1, T1> {
  _FakeConverter_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_4<T1> extends _i1.SmartFake implements Sink<T1> {
  _FakeSink_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [XmlElement].
///
/// See the documentation for Mockito's code generation for more information.
class MockXmlElement extends _i1.Mock implements _i5.XmlElement {
  MockXmlElement() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isSelfClosing => (super.noSuchMethod(
        Invocation.getter(#isSelfClosing),
        returnValue: false,
      ) as bool);

  @override
  set isSelfClosing(bool? _isSelfClosing) => super.noSuchMethod(
        Invocation.setter(
          #isSelfClosing,
          _isSelfClosing,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.XmlName get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _FakeXmlName_0(
          this,
          Invocation.getter(#name),
        ),
      ) as _i2.XmlName);

  @override
  _i7.XmlNodeType get nodeType => (super.noSuchMethod(
        Invocation.getter(#nodeType),
        returnValue: _i7.XmlNodeType.ATTRIBUTE,
      ) as _i7.XmlNodeType);

  @override
  _i4.XmlNodeList<_i8.XmlAttribute> get attributes => (super.noSuchMethod(
        Invocation.getter(#attributes),
        returnValue: _FakeXmlNodeList_1<_i8.XmlAttribute>(
          this,
          Invocation.getter(#attributes),
        ),
      ) as _i4.XmlNodeList<_i8.XmlAttribute>);

  @override
  _i4.XmlNodeList<_i3.XmlNode> get children => (super.noSuchMethod(
        Invocation.getter(#children),
        returnValue: _FakeXmlNodeList_1<_i3.XmlNode>(
          this,
          Invocation.getter(#children),
        ),
      ) as _i4.XmlNodeList<_i3.XmlNode>);

  @override
  Iterable<_i5.XmlElement> get childElements => (super.noSuchMethod(
        Invocation.getter(#childElements),
        returnValue: <_i5.XmlElement>[],
      ) as Iterable<_i5.XmlElement>);

  @override
  bool get hasParent => (super.noSuchMethod(
        Invocation.getter(#hasParent),
        returnValue: false,
      ) as bool);

  @override
  String get text => (super.noSuchMethod(
        Invocation.getter(#text),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#text),
        ),
      ) as String);

  @override
  String get qualifiedName => (super.noSuchMethod(
        Invocation.getter(#qualifiedName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#qualifiedName),
        ),
      ) as String);

  @override
  String get localName => (super.noSuchMethod(
        Invocation.getter(#localName),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#localName),
        ),
      ) as String);

  @override
  _i5.XmlElement copy() => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [],
        ),
        returnValue: _FakeXmlElement_2(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
      ) as _i5.XmlElement);

  @override
  void accept(_i10.XmlVisitor? visitor) => super.noSuchMethod(
        Invocation.method(
          #accept,
          [visitor],
        ),
        returnValueForMissingStub: null,
      );

  @override
  String? getAttribute(
    String? name, {
    String? namespace,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getAttribute,
        [name],
        {#namespace: namespace},
      )) as String?);

  @override
  _i8.XmlAttribute? getAttributeNode(
    String? name, {
    String? namespace,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getAttributeNode,
        [name],
        {#namespace: namespace},
      )) as _i8.XmlAttribute?);

  @override
  void setAttribute(
    String? name,
    String? value, {
    String? namespace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #setAttribute,
          [
            name,
            value,
          ],
          {#namespace: namespace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAttribute(
    String? name, {
    String? namespace,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #removeAttribute,
          [name],
          {#namespace: namespace},
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.XmlElement? getElement(
    String? name, {
    String? namespace,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #getElement,
        [name],
        {#namespace: namespace},
      )) as _i5.XmlElement?);

  @override
  String toXmlString({
    bool? pretty = false,
    _i11.XmlEntityMapping? entityMapping,
    int? level,
    String? indent,
    String? newLine,
    _i12.Predicate<_i3.XmlNode>? preserveWhitespace,
    _i12.Predicate<_i8.XmlAttribute>? indentAttribute,
    Comparator<_i8.XmlAttribute>? sortAttributes,
    _i12.Predicate<_i3.XmlNode>? spaceBeforeSelfClose,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #toXmlString,
          [],
          {
            #pretty: pretty,
            #entityMapping: entityMapping,
            #level: level,
            #indent: indent,
            #newLine: newLine,
            #preserveWhitespace: preserveWhitespace,
            #indentAttribute: indentAttribute,
            #sortAttributes: sortAttributes,
            #spaceBeforeSelfClose: spaceBeforeSelfClose,
          },
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #toXmlString,
            [],
            {
              #pretty: pretty,
              #entityMapping: entityMapping,
              #level: level,
              #indent: indent,
              #newLine: newLine,
              #preserveWhitespace: preserveWhitespace,
              #indentAttribute: indentAttribute,
              #sortAttributes: sortAttributes,
              #spaceBeforeSelfClose: spaceBeforeSelfClose,
            },
          ),
        ),
      ) as String);

  @override
  void attachParent(_i3.XmlNode? parent) => super.noSuchMethod(
        Invocation.method(
          #attachParent,
          [parent],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void detachParent(_i3.XmlNode? parent) => super.noSuchMethod(
        Invocation.method(
          #detachParent,
          [parent],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Converter].
///
/// See the documentation for Mockito's code generation for more information.
class MockConverter<S, T> extends _i1.Mock implements _i6.Converter<S, T> {
  MockConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T convert(S? input) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
      ) as T);

  @override
  _i6.Converter<S, TT> fuse<TT>(_i6.Converter<T, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_3<S, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i6.Converter<S, TT>);

  @override
  Sink<S> startChunkedConversion(Sink<T>? sink) => (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_4<S>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<S>);

  @override
  _i13.Stream<T> bind(_i13.Stream<S>? stream) => (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i13.Stream<T>.empty(),
      ) as _i13.Stream<T>);

  @override
  _i6.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_3<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i6.Converter<RS, RT>);
}

/// A class which mocks [PropElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropElementParser<T extends _i14.WebDavStdResourceProp<dynamic>>
    extends _i1.Mock implements _i15.PropElementParser<T> {
  MockPropElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T? convert(
          ({
            String? desc,
            _i16.WebDavStdResError? error,
            _i5.XmlElement node,
            int status
          })? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as T?);

  @override
  _i6.Converter<
          ({String? desc, _i16.WebDavStdResError? error, _i5.XmlElement node, int status}), TT>
      fuse<TT>(_i6.Converter<T?, TT>? other) => (super.noSuchMethod(
            Invocation.method(
              #fuse,
              [other],
            ),
            returnValue: _FakeConverter_3<
                ({
                  String? desc,
                  _i16.WebDavStdResError? error,
                  _i5.XmlElement node,
                  int status
                }),
                TT>(
              this,
              Invocation.method(
                #fuse,
                [other],
              ),
            ),
          ) as _i6.Converter<
              ({
                String? desc,
                _i16.WebDavStdResError? error,
                _i5.XmlElement node,
                int status
              }),
              TT>);

  @override
  Sink<({String? desc, _i16.WebDavStdResError? error, _i5.XmlElement node, int status})>
      startChunkedConversion(Sink<T?>? sink) => (super.noSuchMethod(
            Invocation.method(
              #startChunkedConversion,
              [sink],
            ),
            returnValue: _FakeSink_4<
                ({
                  String? desc,
                  _i16.WebDavStdResError? error,
                  _i5.XmlElement node,
                  int status
                })>(
              this,
              Invocation.method(
                #startChunkedConversion,
                [sink],
              ),
            ),
          ) as Sink<
              ({
                String? desc,
                _i16.WebDavStdResError? error,
                _i5.XmlElement node,
                int status
              })>);

  @override
  _i13.Stream<T?> bind(
          _i13.Stream<
                  ({
                    String? desc,
                    _i16.WebDavStdResError? error,
                    _i5.XmlElement node,
                    int status
                  })>?
              stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i13.Stream<T?>.empty(),
      ) as _i13.Stream<T?>);

  @override
  _i6.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_3<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i6.Converter<RS, RT>);
}

/// A class which mocks [ErrorElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorElementParser extends _i1.Mock
    implements _i15.ErrorElementParser {
  MockErrorElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.WebDavStdResError? convert(_i5.XmlElement? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as _i16.WebDavStdResError?);

  @override
  _i6.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i6.Converter<_i16.WebDavStdResError?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_3<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i6.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(
          Sink<_i16.WebDavStdResError?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_4<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i13.Stream<_i16.WebDavStdResError?> bind(
          _i13.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i13.Stream<_i16.WebDavStdResError?>.empty(),
      ) as _i13.Stream<_i16.WebDavStdResError?>);

  @override
  _i6.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_3<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i6.Converter<RS, RT>);
}

/// A class which mocks [PropstatElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropstatElementParser extends _i1.Mock
    implements _i15.PropstatElementParser {
  MockPropstatElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i14.WebDavStdResourceProp<dynamic>> convert(
          ({_i5.XmlElement node, _i14.WebDavStdResource resource})? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: <_i14.WebDavStdResourceProp<dynamic>>[],
      ) as Iterable<_i14.WebDavStdResourceProp<dynamic>>);

  @override
  _i6.Converter<({_i5.XmlElement node, _i14.WebDavStdResource resource}), TT>
      fuse<TT>(
              _i6.Converter<Iterable<_i14.WebDavStdResourceProp<dynamic>>, TT>?
                  other) =>
          (super.noSuchMethod(
            Invocation.method(
              #fuse,
              [other],
            ),
            returnValue: _FakeConverter_3<
                ({_i5.XmlElement node, _i14.WebDavStdResource resource}), TT>(
              this,
              Invocation.method(
                #fuse,
                [other],
              ),
            ),
          ) as _i6.Converter<
              ({_i5.XmlElement node, _i14.WebDavStdResource resource}), TT>);

  @override
  Sink<({_i5.XmlElement node, _i14.WebDavStdResource resource})>
      startChunkedConversion(
              Sink<Iterable<_i14.WebDavStdResourceProp<dynamic>>>? sink) =>
          (super.noSuchMethod(
            Invocation.method(
              #startChunkedConversion,
              [sink],
            ),
            returnValue: _FakeSink_4<
                ({_i5.XmlElement node, _i14.WebDavStdResource resource})>(
              this,
              Invocation.method(
                #startChunkedConversion,
                [sink],
              ),
            ),
          ) as Sink<({_i5.XmlElement node, _i14.WebDavStdResource resource})>);

  @override
  _i13.Stream<Iterable<_i14.WebDavStdResourceProp<dynamic>>> bind(
          _i13.Stream<({_i5.XmlElement node, _i14.WebDavStdResource resource})>?
              stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue:
            _i13.Stream<Iterable<_i14.WebDavStdResourceProp<dynamic>>>.empty(),
      ) as _i13.Stream<Iterable<_i14.WebDavStdResourceProp<dynamic>>>);

  @override
  _i6.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_3<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i6.Converter<RS, RT>);
}

/// A class which mocks [ResponseElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseElementParser extends _i1.Mock
    implements _i15.ResponseElementParser {
  MockResponseElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i14.WebDavStdResource> convert(_i5.XmlElement? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: <_i14.WebDavStdResource>[],
      ) as Iterable<_i14.WebDavStdResource>);

  @override
  _i6.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i6.Converter<Iterable<_i14.WebDavStdResource>, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_3<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i6.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(
          Sink<Iterable<_i14.WebDavStdResource>>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_4<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i13.Stream<Iterable<_i14.WebDavStdResource>> bind(
          _i13.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i13.Stream<Iterable<_i14.WebDavStdResource>>.empty(),
      ) as _i13.Stream<Iterable<_i14.WebDavStdResource>>);

  @override
  _i6.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_3<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i6.Converter<RS, RT>);
}

/// A class which mocks [MultiStatusElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultiStatusElementParser extends _i1.Mock
    implements _i15.MultiStatusElementParser {
  MockMultiStatusElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i17.WebDavResponseResultView<_i14.WebDavStdResource>? convert(
          _i5.XmlElement? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as _i17.WebDavResponseResultView<_i14.WebDavStdResource>?);

  @override
  _i6.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i6.Converter<_i17.WebDavResponseResultView<_i14.WebDavStdResource>?,
                  TT>?
              other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_3<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i6.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(
          Sink<_i17.WebDavResponseResultView<_i14.WebDavStdResource>?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_4<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i13.Stream<_i17.WebDavResponseResultView<_i14.WebDavStdResource>?> bind(
          _i13.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i13.Stream<
            _i17.WebDavResponseResultView<_i14.WebDavStdResource>?>.empty(),
      ) as _i13.Stream<_i17.WebDavResponseResultView<_i14.WebDavStdResource>?>);

  @override
  _i6.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_3<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i6.Converter<RS, RT>);
}

/// A class which mocks [HrefElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockHrefElementParser extends _i1.Mock implements _i15.HrefElementParser {
  MockHrefElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri? convert(_i5.XmlElement? input) => (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as Uri?);

  @override
  _i6.Converter<_i5.XmlElement, TT> fuse<TT>(_i6.Converter<Uri?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_3<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i6.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(Sink<Uri?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_4<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i13.Stream<Uri?> bind(_i13.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i13.Stream<Uri?>.empty(),
      ) as _i13.Stream<Uri?>);

  @override
  _i6.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_3<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i6.Converter<RS, RT>);
}

/// A class which mocks [HttpStatusElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpStatusElementParser extends _i1.Mock
    implements _i15.HttpStatusElementParser {
  MockHttpStatusElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int? convert(_i5.XmlElement? input) => (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as int?);

  @override
  _i6.Converter<_i5.XmlElement, TT> fuse<TT>(_i6.Converter<int?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_3<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i6.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(Sink<int?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_4<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i13.Stream<int?> bind(_i13.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i13.Stream<int?>.empty(),
      ) as _i13.Stream<int?>);

  @override
  _i6.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_3<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i6.Converter<RS, RT>);
}
