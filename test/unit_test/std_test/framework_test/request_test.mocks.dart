// Mocks generated by Mockito 5.4.4 from annotations
// in simple_webdav_client/test/unit_test/std_test/framework_test/request_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:convert' as _i3;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i5;
import 'package:simple_webdav_client/src/_std/decoder_mgr.dart' as _i7;
import 'package:simple_webdav_client/src/_std/parser.dart' as _i10;
import 'package:simple_webdav_client/src/_std/resource.dart' as _i9;
import 'package:simple_webdav_client/src/request.dart' as _i6;
import 'package:simple_webdav_client/src/response.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeUri_0 extends _i1.SmartFake implements Uri {
  _FakeUri_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpHeaders_1 extends _i1.SmartFake implements _i2.HttpHeaders {
  _FakeHttpHeaders_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientResponse_2 extends _i1.SmartFake
    implements _i2.HttpClientResponse {
  _FakeHttpClientResponse_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEncoding_3 extends _i1.SmartFake implements _i3.Encoding {
  _FakeEncoding_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamTransformer_4<S, T> extends _i1.SmartFake
    implements _i4.StreamTransformer<S, T> {
  _FakeStreamTransformer_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConverter_5<S, T> extends _i1.SmartFake
    implements _i3.Converter<S, T> {
  _FakeConverter_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_6<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpClientRequest].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientRequest extends _i1.Mock implements _i2.HttpClientRequest {
  MockHttpClientRequest() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get followRedirects => (super.noSuchMethod(
        Invocation.getter(#followRedirects),
        returnValue: false,
      ) as bool);

  @override
  set followRedirects(bool? _followRedirects) => super.noSuchMethod(
        Invocation.setter(
          #followRedirects,
          _followRedirects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get maxRedirects => (super.noSuchMethod(
        Invocation.getter(#maxRedirects),
        returnValue: 0,
      ) as int);

  @override
  set maxRedirects(int? _maxRedirects) => super.noSuchMethod(
        Invocation.setter(
          #maxRedirects,
          _maxRedirects,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
      ) as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          _contentLength,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get bufferOutput => (super.noSuchMethod(
        Invocation.getter(#bufferOutput),
        returnValue: false,
      ) as bool);

  @override
  set bufferOutput(bool? _bufferOutput) => super.noSuchMethod(
        Invocation.setter(
          #bufferOutput,
          _bufferOutput,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get method => (super.noSuchMethod(
        Invocation.getter(#method),
        returnValue: _i5.dummyValue<String>(
          this,
          Invocation.getter(#method),
        ),
      ) as String);

  @override
  Uri get uri => (super.noSuchMethod(
        Invocation.getter(#uri),
        returnValue: _FakeUri_0(
          this,
          Invocation.getter(#uri),
        ),
      ) as Uri);

  @override
  _i2.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_1(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i2.HttpHeaders);

  @override
  List<_i2.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i2.Cookie>[],
      ) as List<_i2.Cookie>);

  @override
  _i4.Future<_i2.HttpClientResponse> get done => (super.noSuchMethod(
        Invocation.getter(#done),
        returnValue:
            _i4.Future<_i2.HttpClientResponse>.value(_FakeHttpClientResponse_2(
          this,
          Invocation.getter(#done),
        )),
      ) as _i4.Future<_i2.HttpClientResponse>);

  @override
  _i3.Encoding get encoding => (super.noSuchMethod(
        Invocation.getter(#encoding),
        returnValue: _FakeEncoding_3(
          this,
          Invocation.getter(#encoding),
        ),
      ) as _i3.Encoding);

  @override
  set encoding(_i3.Encoding? _encoding) => super.noSuchMethod(
        Invocation.setter(
          #encoding,
          _encoding,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<_i2.HttpClientResponse> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue:
            _i4.Future<_i2.HttpClientResponse>.value(_FakeHttpClientResponse_2(
          this,
          Invocation.method(
            #close,
            [],
          ),
        )),
      ) as _i4.Future<_i2.HttpClientResponse>);

  @override
  void abort([
    Object? exception,
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #abort,
          [
            exception,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void add(List<int>? data) => super.noSuchMethod(
        Invocation.method(
          #add,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void write(Object? object) => super.noSuchMethod(
        Invocation.method(
          #write,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeAll(
    Iterable<dynamic>? objects, [
    String? separator = r'',
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #writeAll,
          [
            objects,
            separator,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeln([Object? object = r'']) => super.noSuchMethod(
        Invocation.method(
          #writeln,
          [object],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void writeCharCode(int? charCode) => super.noSuchMethod(
        Invocation.method(
          #writeCharCode,
          [charCode],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addError(
    Object? error, [
    StackTrace? stackTrace,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #addError,
          [
            error,
            stackTrace,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Future<dynamic> addStream(_i4.Stream<List<int>>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #addStream,
          [stream],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);

  @override
  _i4.Future<dynamic> flush() => (super.noSuchMethod(
        Invocation.method(
          #flush,
          [],
        ),
        returnValue: _i4.Future<dynamic>.value(),
      ) as _i4.Future<dynamic>);
}

/// A class which mocks [WebDavRequestParam].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDavRequestParam extends _i1.Mock
    implements _i6.WebDavRequestParam {
  MockWebDavRequestParam() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void beforeAddRequestBody(_i2.HttpClientRequest? request) =>
      super.noSuchMethod(
        Invocation.method(
          #beforeAddRequestBody,
          [request],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [ResponseBodyDecoderManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseBodyDecoderManager extends _i1.Mock
    implements _i7.ResponseBodyDecoderManager {
  MockResponseBodyDecoderManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<String> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <String>[],
      ) as Iterable<String>);

  @override
  Iterable<MapEntry<String, _i4.StreamTransformer<List<int>, String>>>
      get entries => (super.noSuchMethod(
            Invocation.getter(#entries),
            returnValue: <MapEntry<String,
                _i4.StreamTransformer<List<int>, String>>>[],
          ) as Iterable<
              MapEntry<String, _i4.StreamTransformer<List<int>, String>>>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i4.StreamTransformer<List<int>, String>> get values =>
      (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <_i4.StreamTransformer<List<int>, String>>[],
      ) as Iterable<_i4.StreamTransformer<List<int>, String>>);

  @override
  void operator []=(
    String? key,
    _i4.StreamTransformer<List<int>, String>? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<RK, RV> cast<RK, RV>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <RK, RV>{},
      ) as Map<RK, RV>);

  @override
  void forEach(
          void Function(
            String,
            _i4.StreamTransformer<List<int>, String>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(Map<String, _i4.StreamTransformer<List<int>, String>>? other) =>
      super.noSuchMethod(
        Invocation.method(
          #addAll,
          [other],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsValue(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #containsValue,
          [value],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i4.StreamTransformer<List<int>, String> putIfAbsent(
    String? key,
    _i4.StreamTransformer<List<int>, String> Function()? ifAbsent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putIfAbsent,
          [
            key,
            ifAbsent,
          ],
        ),
        returnValue: _FakeStreamTransformer_4<List<int>, String>(
          this,
          Invocation.method(
            #putIfAbsent,
            [
              key,
              ifAbsent,
            ],
          ),
        ),
      ) as _i4.StreamTransformer<List<int>, String>);

  @override
  _i4.StreamTransformer<List<int>, String> update(
    String? key,
    _i4.StreamTransformer<List<int>, String> Function(
            _i4.StreamTransformer<List<int>, String>)?
        update, {
    _i4.StreamTransformer<List<int>, String> Function()? ifAbsent,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            key,
            update,
          ],
          {#ifAbsent: ifAbsent},
        ),
        returnValue: _FakeStreamTransformer_4<List<int>, String>(
          this,
          Invocation.method(
            #update,
            [
              key,
              update,
            ],
            {#ifAbsent: ifAbsent},
          ),
        ),
      ) as _i4.StreamTransformer<List<int>, String>);

  @override
  void updateAll(
          _i4.StreamTransformer<List<int>, String> Function(
            String,
            _i4.StreamTransformer<List<int>, String>,
          )? update) =>
      super.noSuchMethod(
        Invocation.method(
          #updateAll,
          [update],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<K2, V2> map<K2, V2>(
          MapEntry<K2, V2> Function(
            String,
            _i4.StreamTransformer<List<int>, String>,
          )? transform) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [transform],
        ),
        returnValue: <K2, V2>{},
      ) as Map<K2, V2>);

  @override
  void addEntries(
          Iterable<MapEntry<String, _i4.StreamTransformer<List<int>, String>>>?
              newEntries) =>
      super.noSuchMethod(
        Invocation.method(
          #addEntries,
          [newEntries],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(
          bool Function(
            String,
            _i4.StreamTransformer<List<int>, String>,
          )? test) =>
      super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ResponseResultParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseResultParser<
        O extends _i8.WebDavResponseResultView<_i9.WebDavStdResource>>
    extends _i1.Mock implements _i10.ResponseResultParser<O> {
  MockResponseResultParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  O convert(_i10.ResponseResultParserParam? input) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: _i5.dummyValue<O>(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
      ) as O);

  @override
  _i3.Converter<_i10.ResponseResultParserParam, TT> fuse<TT>(
          _i3.Converter<O, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_5<_i10.ResponseResultParserParam, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i3.Converter<_i10.ResponseResultParserParam, TT>);

  @override
  Sink<_i10.ResponseResultParserParam> startChunkedConversion(Sink<O>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_6<_i10.ResponseResultParserParam>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i10.ResponseResultParserParam>);

  @override
  _i4.Stream<O> bind(_i4.Stream<_i10.ResponseResultParserParam>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i4.Stream<O>.empty(),
      ) as _i4.Stream<O>);

  @override
  _i3.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_5<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i3.Converter<RS, RT>);
}
