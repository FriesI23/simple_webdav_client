// Mocks generated by Mockito 5.4.4 from annotations
// in simple_webdav_client/test/unit_test/std_test/framework_test/response_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'dart:convert' as _i4;
import 'dart:io' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:simple_webdav_client/src/_std/decoder_mgr.dart' as _i7;
import 'package:simple_webdav_client/src/_std/parser.dart' as _i9;
import 'package:simple_webdav_client/src/_std/resource.dart' as _i5;
import 'package:simple_webdav_client/src/_std/response.dart' as _i10;
import 'package:simple_webdav_client/src/response.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHttpHeaders_0 extends _i1.SmartFake implements _i2.HttpHeaders {
  _FakeHttpHeaders_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHttpClientResponse_1 extends _i1.SmartFake
    implements _i2.HttpClientResponse {
  _FakeHttpClientResponse_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocket_2 extends _i1.SmartFake implements _i2.Socket {
  _FakeSocket_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_3<T> extends _i1.SmartFake
    implements _i3.StreamSubscription<T> {
  _FakeStreamSubscription_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeFuture_4<T> extends _i1.SmartFake implements _i3.Future<T> {
  _FakeFuture_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamTransformer_5<S, T> extends _i1.SmartFake
    implements _i3.StreamTransformer<S, T> {
  _FakeStreamTransformer_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeConverter_6<S, T> extends _i1.SmartFake
    implements _i4.Converter<S, T> {
  _FakeConverter_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_7<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIterator_8<E> extends _i1.SmartFake implements Iterator<E> {
  _FakeIterator_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebDavStdResource_9 extends _i1.SmartFake
    implements _i5.WebDavStdResource {
  _FakeWebDavStdResource_9(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i1.Mock implements _i2.HttpHeaders {
  MockHttpHeaders() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set expires(DateTime? _expires) => super.noSuchMethod(
        Invocation.setter(
          #expires,
          _expires,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set ifModifiedSince(DateTime? _ifModifiedSince) => super.noSuchMethod(
        Invocation.setter(
          #ifModifiedSince,
          _ifModifiedSince,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set host(String? _host) => super.noSuchMethod(
        Invocation.setter(
          #host,
          _host,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set port(int? _port) => super.noSuchMethod(
        Invocation.setter(
          #port,
          _port,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set contentType(_i2.ContentType? _contentType) => super.noSuchMethod(
        Invocation.setter(
          #contentType,
          _contentType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
      ) as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          _contentLength,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get chunkedTransferEncoding => (super.noSuchMethod(
        Invocation.getter(#chunkedTransferEncoding),
        returnValue: false,
      ) as bool);

  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
        Invocation.setter(
          #chunkedTransferEncoding,
          _chunkedTransferEncoding,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String>? operator [](String? name) =>
      (super.noSuchMethod(Invocation.method(
        #[],
        [name],
      )) as List<String>?);

  @override
  String? value(String? name) => (super.noSuchMethod(Invocation.method(
        #value,
        [name],
      )) as String?);

  @override
  void add(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void set(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #set,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void remove(
    String? name,
    Object? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #remove,
          [
            name,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(String? name) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forEach(
          void Function(
            String,
            List<String>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void noFolding(String? name) => super.noSuchMethod(
        Invocation.method(
          #noFolding,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HttpClientResponse].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClientResponse extends _i1.Mock
    implements _i2.HttpClientResponse {
  MockHttpClientResponse() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get statusCode => (super.noSuchMethod(
        Invocation.getter(#statusCode),
        returnValue: 0,
      ) as int);

  @override
  String get reasonPhrase => (super.noSuchMethod(
        Invocation.getter(#reasonPhrase),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.getter(#reasonPhrase),
        ),
      ) as String);

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
      ) as int);

  @override
  _i2.HttpClientResponseCompressionState get compressionState =>
      (super.noSuchMethod(
        Invocation.getter(#compressionState),
        returnValue: _i2.HttpClientResponseCompressionState.notCompressed,
      ) as _i2.HttpClientResponseCompressionState);

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
      ) as bool);

  @override
  bool get isRedirect => (super.noSuchMethod(
        Invocation.getter(#isRedirect),
        returnValue: false,
      ) as bool);

  @override
  List<_i2.RedirectInfo> get redirects => (super.noSuchMethod(
        Invocation.getter(#redirects),
        returnValue: <_i2.RedirectInfo>[],
      ) as List<_i2.RedirectInfo>);

  @override
  _i2.HttpHeaders get headers => (super.noSuchMethod(
        Invocation.getter(#headers),
        returnValue: _FakeHttpHeaders_0(
          this,
          Invocation.getter(#headers),
        ),
      ) as _i2.HttpHeaders);

  @override
  List<_i2.Cookie> get cookies => (super.noSuchMethod(
        Invocation.getter(#cookies),
        returnValue: <_i2.Cookie>[],
      ) as List<_i2.Cookie>);

  @override
  bool get isBroadcast => (super.noSuchMethod(
        Invocation.getter(#isBroadcast),
        returnValue: false,
      ) as bool);

  @override
  _i3.Future<int> get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: _i3.Future<int>.value(0),
      ) as _i3.Future<int>);

  @override
  _i3.Future<bool> get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<List<int>> get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<List<int>> get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<List<int>> get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<_i2.HttpClientResponse> redirect([
    String? method,
    Uri? url,
    bool? followLoops,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #redirect,
          [
            method,
            url,
            followLoops,
          ],
        ),
        returnValue:
            _i3.Future<_i2.HttpClientResponse>.value(_FakeHttpClientResponse_1(
          this,
          Invocation.method(
            #redirect,
            [
              method,
              url,
              followLoops,
            ],
          ),
        )),
      ) as _i3.Future<_i2.HttpClientResponse>);

  @override
  _i3.Future<_i2.Socket> detachSocket() => (super.noSuchMethod(
        Invocation.method(
          #detachSocket,
          [],
        ),
        returnValue: _i3.Future<_i2.Socket>.value(_FakeSocket_2(
          this,
          Invocation.method(
            #detachSocket,
            [],
          ),
        )),
      ) as _i3.Future<_i2.Socket>);

  @override
  _i3.Stream<List<int>> asBroadcastStream({
    void Function(_i3.StreamSubscription<List<int>>)? onListen,
    void Function(_i3.StreamSubscription<List<int>>)? onCancel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #asBroadcastStream,
          [],
          {
            #onListen: onListen,
            #onCancel: onCancel,
          },
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  _i3.StreamSubscription<List<int>> listen(
    void Function(List<int>)? onData, {
    Function? onError,
    void Function()? onDone,
    bool? cancelOnError,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listen,
          [onData],
          {
            #onError: onError,
            #onDone: onDone,
            #cancelOnError: cancelOnError,
          },
        ),
        returnValue: _FakeStreamSubscription_3<List<int>>(
          this,
          Invocation.method(
            #listen,
            [onData],
            {
              #onError: onError,
              #onDone: onDone,
              #cancelOnError: cancelOnError,
            },
          ),
        ),
      ) as _i3.StreamSubscription<List<int>>);

  @override
  _i3.Stream<List<int>> where(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  _i3.Stream<S> map<S>(S Function(List<int>)? convert) => (super.noSuchMethod(
        Invocation.method(
          #map,
          [convert],
        ),
        returnValue: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Stream<E> asyncMap<E>(_i3.FutureOr<E> Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncMap,
          [convert],
        ),
        returnValue: _i3.Stream<E>.empty(),
      ) as _i3.Stream<E>);

  @override
  _i3.Stream<E> asyncExpand<E>(_i3.Stream<E>? Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #asyncExpand,
          [convert],
        ),
        returnValue: _i3.Stream<E>.empty(),
      ) as _i3.Stream<E>);

  @override
  _i3.Stream<List<int>> handleError(
    Function? onError, {
    bool Function(dynamic)? test,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleError,
          [onError],
          {#test: test},
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  _i3.Stream<S> expand<S>(Iterable<S> Function(List<int>)? convert) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [convert],
        ),
        returnValue: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Future<dynamic> pipe(_i3.StreamConsumer<List<int>>? streamConsumer) =>
      (super.noSuchMethod(
        Invocation.method(
          #pipe,
          [streamConsumer],
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.Stream<S> transform<S>(
          _i3.StreamTransformer<List<int>, S>? streamTransformer) =>
      (super.noSuchMethod(
        Invocation.method(
          #transform,
          [streamTransformer],
        ),
        returnValue: _i3.Stream<S>.empty(),
      ) as _i3.Stream<S>);

  @override
  _i3.Future<List<int>> reduce(
          List<int> Function(
            List<int>,
            List<int>,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<S> fold<S>(
    S? initialValue,
    S Function(
      S,
      List<int>,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<S>(
                this,
                Invocation.method(
                  #fold,
                  [
                    initialValue,
                    combine,
                  ],
                ),
              ),
              (S v) => _i3.Future<S>.value(v),
            ) ??
            _FakeFuture_4<S>(
              this,
              Invocation.method(
                #fold,
                [
                  initialValue,
                  combine,
                ],
              ),
            ),
      ) as _i3.Future<S>);

  @override
  _i3.Future<String> join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i3.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        )),
      ) as _i3.Future<String>);

  @override
  _i3.Future<bool> contains(Object? needle) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [needle],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> forEach(void Function(List<int>)? action) =>
      (super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> every(bool Function(List<int>)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> any(bool Function(List<int>)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Stream<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _i3.Stream<R>.empty(),
      ) as _i3.Stream<R>);

  @override
  _i3.Future<List<List<int>>> toList() => (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
        ),
        returnValue: _i3.Future<List<List<int>>>.value(<List<int>>[]),
      ) as _i3.Future<List<List<int>>>);

  @override
  _i3.Future<Set<List<int>>> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: _i3.Future<Set<List<int>>>.value(<List<int>>{}),
      ) as _i3.Future<Set<List<int>>>);

  @override
  _i3.Future<E> drain<E>([E? futureValue]) => (super.noSuchMethod(
        Invocation.method(
          #drain,
          [futureValue],
        ),
        returnValue: _i6.ifNotNull(
              _i6.dummyValueOrNull<E>(
                this,
                Invocation.method(
                  #drain,
                  [futureValue],
                ),
              ),
              (E v) => _i3.Future<E>.value(v),
            ) ??
            _FakeFuture_4<E>(
              this,
              Invocation.method(
                #drain,
                [futureValue],
              ),
            ),
      ) as _i3.Future<E>);

  @override
  _i3.Stream<List<int>> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  _i3.Stream<List<int>> takeWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  _i3.Stream<List<int>> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  _i3.Stream<List<int>> skipWhile(bool Function(List<int>)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  _i3.Stream<List<int>> distinct(
          [bool Function(
            List<int>,
            List<int>,
          )? equals]) =>
      (super.noSuchMethod(
        Invocation.method(
          #distinct,
          [equals],
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);

  @override
  _i3.Future<List<int>> firstWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<List<int>> lastWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<List<int>> singleWhere(
    bool Function(List<int>)? test, {
    List<int> Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Future<List<int>> elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _i3.Future<List<int>>.value(<int>[]),
      ) as _i3.Future<List<int>>);

  @override
  _i3.Stream<List<int>> timeout(
    Duration? timeLimit, {
    void Function(_i3.EventSink<List<int>>)? onTimeout,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeLimit],
          {#onTimeout: onTimeout},
        ),
        returnValue: _i3.Stream<List<int>>.empty(),
      ) as _i3.Stream<List<int>>);
}

/// A class which mocks [ResponseBodyDecoderManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseBodyDecoderManager extends _i1.Mock
    implements _i7.ResponseBodyDecoderManager {
  MockResponseBodyDecoderManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<String> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <String>[],
      ) as Iterable<String>);

  @override
  Iterable<MapEntry<String, _i3.StreamTransformer<List<int>, String>>>
      get entries => (super.noSuchMethod(
            Invocation.getter(#entries),
            returnValue: <MapEntry<String,
                _i3.StreamTransformer<List<int>, String>>>[],
          ) as Iterable<
              MapEntry<String, _i3.StreamTransformer<List<int>, String>>>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i3.StreamTransformer<List<int>, String>> get values =>
      (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <_i3.StreamTransformer<List<int>, String>>[],
      ) as Iterable<_i3.StreamTransformer<List<int>, String>>);

  @override
  void operator []=(
    String? key,
    _i3.StreamTransformer<List<int>, String>? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<RK, RV> cast<RK, RV>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <RK, RV>{},
      ) as Map<RK, RV>);

  @override
  void forEach(
          void Function(
            String,
            _i3.StreamTransformer<List<int>, String>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(Map<String, _i3.StreamTransformer<List<int>, String>>? other) =>
      super.noSuchMethod(
        Invocation.method(
          #addAll,
          [other],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsValue(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #containsValue,
          [value],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i3.StreamTransformer<List<int>, String> putIfAbsent(
    String? key,
    _i3.StreamTransformer<List<int>, String> Function()? ifAbsent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putIfAbsent,
          [
            key,
            ifAbsent,
          ],
        ),
        returnValue: _FakeStreamTransformer_5<List<int>, String>(
          this,
          Invocation.method(
            #putIfAbsent,
            [
              key,
              ifAbsent,
            ],
          ),
        ),
      ) as _i3.StreamTransformer<List<int>, String>);

  @override
  _i3.StreamTransformer<List<int>, String> update(
    String? key,
    _i3.StreamTransformer<List<int>, String> Function(
            _i3.StreamTransformer<List<int>, String>)?
        update, {
    _i3.StreamTransformer<List<int>, String> Function()? ifAbsent,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            key,
            update,
          ],
          {#ifAbsent: ifAbsent},
        ),
        returnValue: _FakeStreamTransformer_5<List<int>, String>(
          this,
          Invocation.method(
            #update,
            [
              key,
              update,
            ],
            {#ifAbsent: ifAbsent},
          ),
        ),
      ) as _i3.StreamTransformer<List<int>, String>);

  @override
  void updateAll(
          _i3.StreamTransformer<List<int>, String> Function(
            String,
            _i3.StreamTransformer<List<int>, String>,
          )? update) =>
      super.noSuchMethod(
        Invocation.method(
          #updateAll,
          [update],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<K2, V2> map<K2, V2>(
          MapEntry<K2, V2> Function(
            String,
            _i3.StreamTransformer<List<int>, String>,
          )? transform) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [transform],
        ),
        returnValue: <K2, V2>{},
      ) as Map<K2, V2>);

  @override
  void addEntries(
          Iterable<MapEntry<String, _i3.StreamTransformer<List<int>, String>>>?
              newEntries) =>
      super.noSuchMethod(
        Invocation.method(
          #addEntries,
          [newEntries],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(
          bool Function(
            String,
            _i3.StreamTransformer<List<int>, String>,
          )? test) =>
      super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [ResponseResultParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseResultParser<
        O extends _i8.WebDavResponseResultView<_i5.WebDavStdResource>>
    extends _i1.Mock implements _i9.ResponseResultParser<O> {
  MockResponseResultParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  O convert(_i9.ResponseResultParserParam? input) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: _i6.dummyValue<O>(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
      ) as O);

  @override
  _i4.Converter<_i9.ResponseResultParserParam, TT> fuse<TT>(
          _i4.Converter<O, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_6<_i9.ResponseResultParserParam, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i4.Converter<_i9.ResponseResultParserParam, TT>);

  @override
  Sink<_i9.ResponseResultParserParam> startChunkedConversion(Sink<O>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_7<_i9.ResponseResultParserParam>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i9.ResponseResultParserParam>);

  @override
  _i3.Stream<O> bind(_i3.Stream<_i9.ResponseResultParserParam>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i3.Stream<O>.empty(),
      ) as _i3.Stream<O>);

  @override
  _i4.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_6<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i4.Converter<RS, RT>);
}

/// A class which mocks [WebDavStdResResultView].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDavStdResResultView extends _i1.Mock
    implements _i10.WebDavStdResResultView {
  MockWebDavStdResResultView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterator<_i5.WebDavStdResource> get iterator => (super.noSuchMethod(
        Invocation.getter(#iterator),
        returnValue: _FakeIterator_8<_i5.WebDavStdResource>(
          this,
          Invocation.getter(#iterator),
        ),
      ) as Iterator<_i5.WebDavStdResource>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  _i5.WebDavStdResource get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _FakeWebDavStdResource_9(
          this,
          Invocation.getter(#first),
        ),
      ) as _i5.WebDavStdResource);

  @override
  _i5.WebDavStdResource get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _FakeWebDavStdResource_9(
          this,
          Invocation.getter(#last),
        ),
      ) as _i5.WebDavStdResource);

  @override
  _i5.WebDavStdResource get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _FakeWebDavStdResource_9(
          this,
          Invocation.getter(#single),
        ),
      ) as _i5.WebDavStdResource);

  @override
  bool contain(Uri? path) => (super.noSuchMethod(
        Invocation.method(
          #contain,
          [path],
        ),
        returnValue: false,
      ) as bool);

  @override
  String toDebugString() => (super.noSuchMethod(
        Invocation.method(
          #toDebugString,
          [],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #toDebugString,
            [],
          ),
        ),
      ) as String);

  @override
  Iterable<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <R>[],
      ) as Iterable<R>);

  @override
  Iterable<_i5.WebDavStdResource> followedBy(
          Iterable<_i5.WebDavStdResource>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #followedBy,
          [other],
        ),
        returnValue: <_i5.WebDavStdResource>[],
      ) as Iterable<_i5.WebDavStdResource>);

  @override
  Iterable<T> map<T>(T Function(_i5.WebDavStdResource)? toElement) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [toElement],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<_i5.WebDavStdResource> where(
          bool Function(_i5.WebDavStdResource)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: <_i5.WebDavStdResource>[],
      ) as Iterable<_i5.WebDavStdResource>);

  @override
  Iterable<T> whereType<T>() => (super.noSuchMethod(
        Invocation.method(
          #whereType,
          [],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> expand<T>(
          Iterable<T> Function(_i5.WebDavStdResource)? toElements) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [toElements],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  bool contains(Object? element) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  void forEach(void Function(_i5.WebDavStdResource)? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.WebDavStdResource reduce(
          _i5.WebDavStdResource Function(
            _i5.WebDavStdResource,
            _i5.WebDavStdResource,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _FakeWebDavStdResource_9(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        ),
      ) as _i5.WebDavStdResource);

  @override
  T fold<T>(
    T? initialValue,
    T Function(
      T,
      _i5.WebDavStdResource,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i6.dummyValue<T>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as T);

  @override
  bool every(bool Function(_i5.WebDavStdResource)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  String join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i6.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        ),
      ) as String);

  @override
  bool any(bool Function(_i5.WebDavStdResource)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<_i5.WebDavStdResource> toList({bool? growable = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
          {#growable: growable},
        ),
        returnValue: <_i5.WebDavStdResource>[],
      ) as List<_i5.WebDavStdResource>);

  @override
  Set<_i5.WebDavStdResource> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: <_i5.WebDavStdResource>{},
      ) as Set<_i5.WebDavStdResource>);

  @override
  Iterable<_i5.WebDavStdResource> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: <_i5.WebDavStdResource>[],
      ) as Iterable<_i5.WebDavStdResource>);

  @override
  Iterable<_i5.WebDavStdResource> takeWhile(
          bool Function(_i5.WebDavStdResource)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: <_i5.WebDavStdResource>[],
      ) as Iterable<_i5.WebDavStdResource>);

  @override
  Iterable<_i5.WebDavStdResource> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: <_i5.WebDavStdResource>[],
      ) as Iterable<_i5.WebDavStdResource>);

  @override
  Iterable<_i5.WebDavStdResource> skipWhile(
          bool Function(_i5.WebDavStdResource)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: <_i5.WebDavStdResource>[],
      ) as Iterable<_i5.WebDavStdResource>);

  @override
  _i5.WebDavStdResource firstWhere(
    bool Function(_i5.WebDavStdResource)? test, {
    _i5.WebDavStdResource Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeWebDavStdResource_9(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i5.WebDavStdResource);

  @override
  _i5.WebDavStdResource lastWhere(
    bool Function(_i5.WebDavStdResource)? test, {
    _i5.WebDavStdResource Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeWebDavStdResource_9(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i5.WebDavStdResource);

  @override
  _i5.WebDavStdResource singleWhere(
    bool Function(_i5.WebDavStdResource)? test, {
    _i5.WebDavStdResource Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeWebDavStdResource_9(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i5.WebDavStdResource);

  @override
  _i5.WebDavStdResource elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _FakeWebDavStdResource_9(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        ),
      ) as _i5.WebDavStdResource);
}
