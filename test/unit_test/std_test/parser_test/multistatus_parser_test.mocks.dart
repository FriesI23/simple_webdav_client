// Mocks generated by Mockito 5.4.4 from annotations
// in simple_webdav_client/test/unit_test/std_test/parser_test/multistatus_parser_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:simple_webdav_client/src/_std/parser.dart' as _i3;
import 'package:simple_webdav_client/src/_std/resource.dart' as _i4;
import 'package:xml/src/xml/nodes/element.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConverter_0<S, T> extends _i1.SmartFake
    implements _i2.Converter<S, T> {
  _FakeConverter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_1<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ResponseElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseElementParser extends _i1.Mock
    implements _i3.ResponseElementParser {
  MockResponseElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i4.WebDavStdResource> convert(_i5.XmlElement? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: <_i4.WebDavStdResource>[],
      ) as Iterable<_i4.WebDavStdResource>);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i2.Converter<Iterable<_i4.WebDavStdResource>, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(
          Sink<Iterable<_i4.WebDavStdResource>>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i6.Stream<Iterable<_i4.WebDavStdResource>> bind(
          _i6.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<Iterable<_i4.WebDavStdResource>>.empty(),
      ) as _i6.Stream<Iterable<_i4.WebDavStdResource>>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}
