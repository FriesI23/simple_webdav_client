// Mocks generated by Mockito 5.4.4 from annotations
// in simple_webdav_client/test/unit_test/std_test/parser_test/result_parser_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:convert' as _i2;
import 'dart:io' as _i12;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i9;
import 'package:simple_webdav_client/src/_std/error.dart' as _i6;
import 'package:simple_webdav_client/src/_std/parser.dart' as _i10;
import 'package:simple_webdav_client/src/_std/parser_mgr.dart' as _i4;
import 'package:simple_webdav_client/src/_std/resource.dart' as _i3;
import 'package:simple_webdav_client/src/_std/response.dart' as _i8;
import 'package:simple_webdav_client/src/response.dart' as _i7;
import 'package:xml/xml.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConverter_0<S, T> extends _i1.SmartFake
    implements _i2.Converter<S, T> {
  _FakeConverter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeIterator_1<E> extends _i1.SmartFake implements Iterator<E> {
  _FakeIterator_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWebDavStdResource_2 extends _i1.SmartFake
    implements _i3.WebDavStdResource {
  _FakeWebDavStdResource_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_3<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WebDavResposneDataParserManger].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDavResposneDataParserManger extends _i1.Mock
    implements _i4.WebDavResposneDataParserManger {
  MockWebDavResposneDataParserManger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<({String name, String? ns})> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <({String name, String? ns})>[],
      ) as Iterable<({String name, String? ns})>);

  @override
  set error(_i2.Converter<_i5.XmlElement, _i6.WebDavStdResError?>? parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #error,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set propstat(
          _i2.Converter<({_i5.XmlElement node, _i3.WebDavStdResource resource}),
                  Iterable<_i3.WebDavStdResourceProp<dynamic>>>?
              parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #propstat,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set response(
          _i2.Converter<_i5.XmlElement, Iterable<_i3.WebDavStdResource>>?
              parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #response,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set multistatus(
          _i2.Converter<_i5.XmlElement,
                  _i7.WebDavResponseResultView<_i3.WebDavStdResource>?>?
              parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #multistatus,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set href(_i2.Converter<_i5.XmlElement, Uri?>? parser) => super.noSuchMethod(
        Invocation.setter(
          #href,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set location(_i2.Converter<_i5.XmlElement, Uri?>? parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #location,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set status(_i2.Converter<_i5.XmlElement, int?>? parser) => super.noSuchMethod(
        Invocation.setter(
          #status,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<
      MapEntry<({String name, String? ns}),
          _i2.Converter<dynamic, dynamic>>> get entries => (super.noSuchMethod(
        Invocation.getter(#entries),
        returnValue: <MapEntry<({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>>>[],
      ) as Iterable<
          MapEntry<({String name, String? ns}),
              _i2.Converter<dynamic, dynamic>>>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i2.Converter<dynamic, dynamic>> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <_i2.Converter<dynamic, dynamic>>[],
      ) as Iterable<_i2.Converter<dynamic, dynamic>>);

  @override
  void operator []=(
    ({String name, String? ns})? key,
    _i2.Converter<dynamic, dynamic>? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Converter<
      ({
        String? desc,
        _i6.WebDavStdResError? error,
        _i5.XmlElement node,
        int status
      }),
      T?>? fetchPropParser<T extends _i3.WebDavStdResourceProp<dynamic>>(
    String? name,
    String? namespace,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #fetchPropParser,
        [
          name,
          namespace,
        ],
      )) as _i2.Converter<
          ({
            String? desc,
            _i6.WebDavStdResError? error,
            _i5.XmlElement node,
            int status
          }),
          T?>?);

  @override
  Map<RK, RV> cast<RK, RV>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <RK, RV>{},
      ) as Map<RK, RV>);

  @override
  void forEach(
          void Function(
            ({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(
          Map<({String name, String? ns}), _i2.Converter<dynamic, dynamic>>?
              other) =>
      super.noSuchMethod(
        Invocation.method(
          #addAll,
          [other],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsValue(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #containsValue,
          [value],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.Converter<dynamic, dynamic> putIfAbsent(
    ({String name, String? ns})? key,
    _i2.Converter<dynamic, dynamic> Function()? ifAbsent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putIfAbsent,
          [
            key,
            ifAbsent,
          ],
        ),
        returnValue: _FakeConverter_0<dynamic, dynamic>(
          this,
          Invocation.method(
            #putIfAbsent,
            [
              key,
              ifAbsent,
            ],
          ),
        ),
      ) as _i2.Converter<dynamic, dynamic>);

  @override
  _i2.Converter<dynamic, dynamic> update(
    ({String name, String? ns})? key,
    _i2.Converter<dynamic, dynamic> Function(_i2.Converter<dynamic, dynamic>)?
        update, {
    _i2.Converter<dynamic, dynamic> Function()? ifAbsent,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            key,
            update,
          ],
          {#ifAbsent: ifAbsent},
        ),
        returnValue: _FakeConverter_0<dynamic, dynamic>(
          this,
          Invocation.method(
            #update,
            [
              key,
              update,
            ],
            {#ifAbsent: ifAbsent},
          ),
        ),
      ) as _i2.Converter<dynamic, dynamic>);

  @override
  void updateAll(
          _i2.Converter<dynamic, dynamic> Function(
            ({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>,
          )? update) =>
      super.noSuchMethod(
        Invocation.method(
          #updateAll,
          [update],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<K2, V2> map<K2, V2>(
          MapEntry<K2, V2> Function(
            ({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>,
          )? transform) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [transform],
        ),
        returnValue: <K2, V2>{},
      ) as Map<K2, V2>);

  @override
  void addEntries(
          Iterable<
                  MapEntry<({String name, String? ns}),
                      _i2.Converter<dynamic, dynamic>>>?
              newEntries) =>
      super.noSuchMethod(
        Invocation.method(
          #addEntries,
          [newEntries],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(
          bool Function(
            ({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>,
          )? test) =>
      super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [WebDavStdResResultView].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDavStdResResultView extends _i1.Mock
    implements _i8.WebDavStdResResultView {
  MockWebDavStdResResultView() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterator<_i3.WebDavStdResource> get iterator => (super.noSuchMethod(
        Invocation.getter(#iterator),
        returnValue: _FakeIterator_1<_i3.WebDavStdResource>(
          this,
          Invocation.getter(#iterator),
        ),
      ) as Iterator<_i3.WebDavStdResource>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  _i3.WebDavStdResource get first => (super.noSuchMethod(
        Invocation.getter(#first),
        returnValue: _FakeWebDavStdResource_2(
          this,
          Invocation.getter(#first),
        ),
      ) as _i3.WebDavStdResource);

  @override
  _i3.WebDavStdResource get last => (super.noSuchMethod(
        Invocation.getter(#last),
        returnValue: _FakeWebDavStdResource_2(
          this,
          Invocation.getter(#last),
        ),
      ) as _i3.WebDavStdResource);

  @override
  _i3.WebDavStdResource get single => (super.noSuchMethod(
        Invocation.getter(#single),
        returnValue: _FakeWebDavStdResource_2(
          this,
          Invocation.getter(#single),
        ),
      ) as _i3.WebDavStdResource);

  @override
  bool contain(Uri? path) => (super.noSuchMethod(
        Invocation.method(
          #contain,
          [path],
        ),
        returnValue: false,
      ) as bool);

  @override
  String toDebugString() => (super.noSuchMethod(
        Invocation.method(
          #toDebugString,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #toDebugString,
            [],
          ),
        ),
      ) as String);

  @override
  Iterable<R> cast<R>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <R>[],
      ) as Iterable<R>);

  @override
  Iterable<_i3.WebDavStdResource> followedBy(
          Iterable<_i3.WebDavStdResource>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #followedBy,
          [other],
        ),
        returnValue: <_i3.WebDavStdResource>[],
      ) as Iterable<_i3.WebDavStdResource>);

  @override
  Iterable<T> map<T>(T Function(_i3.WebDavStdResource)? toElement) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [toElement],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<_i3.WebDavStdResource> where(
          bool Function(_i3.WebDavStdResource)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #where,
          [test],
        ),
        returnValue: <_i3.WebDavStdResource>[],
      ) as Iterable<_i3.WebDavStdResource>);

  @override
  Iterable<T> whereType<T>() => (super.noSuchMethod(
        Invocation.method(
          #whereType,
          [],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  Iterable<T> expand<T>(
          Iterable<T> Function(_i3.WebDavStdResource)? toElements) =>
      (super.noSuchMethod(
        Invocation.method(
          #expand,
          [toElements],
        ),
        returnValue: <T>[],
      ) as Iterable<T>);

  @override
  bool contains(Object? element) => (super.noSuchMethod(
        Invocation.method(
          #contains,
          [element],
        ),
        returnValue: false,
      ) as bool);

  @override
  void forEach(void Function(_i3.WebDavStdResource)? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.WebDavStdResource reduce(
          _i3.WebDavStdResource Function(
            _i3.WebDavStdResource,
            _i3.WebDavStdResource,
          )? combine) =>
      (super.noSuchMethod(
        Invocation.method(
          #reduce,
          [combine],
        ),
        returnValue: _FakeWebDavStdResource_2(
          this,
          Invocation.method(
            #reduce,
            [combine],
          ),
        ),
      ) as _i3.WebDavStdResource);

  @override
  T fold<T>(
    T? initialValue,
    T Function(
      T,
      _i3.WebDavStdResource,
    )? combine,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #fold,
          [
            initialValue,
            combine,
          ],
        ),
        returnValue: _i9.dummyValue<T>(
          this,
          Invocation.method(
            #fold,
            [
              initialValue,
              combine,
            ],
          ),
        ),
      ) as T);

  @override
  bool every(bool Function(_i3.WebDavStdResource)? test) => (super.noSuchMethod(
        Invocation.method(
          #every,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  String join([String? separator = r'']) => (super.noSuchMethod(
        Invocation.method(
          #join,
          [separator],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #join,
            [separator],
          ),
        ),
      ) as String);

  @override
  bool any(bool Function(_i3.WebDavStdResource)? test) => (super.noSuchMethod(
        Invocation.method(
          #any,
          [test],
        ),
        returnValue: false,
      ) as bool);

  @override
  List<_i3.WebDavStdResource> toList({bool? growable = true}) =>
      (super.noSuchMethod(
        Invocation.method(
          #toList,
          [],
          {#growable: growable},
        ),
        returnValue: <_i3.WebDavStdResource>[],
      ) as List<_i3.WebDavStdResource>);

  @override
  Set<_i3.WebDavStdResource> toSet() => (super.noSuchMethod(
        Invocation.method(
          #toSet,
          [],
        ),
        returnValue: <_i3.WebDavStdResource>{},
      ) as Set<_i3.WebDavStdResource>);

  @override
  Iterable<_i3.WebDavStdResource> take(int? count) => (super.noSuchMethod(
        Invocation.method(
          #take,
          [count],
        ),
        returnValue: <_i3.WebDavStdResource>[],
      ) as Iterable<_i3.WebDavStdResource>);

  @override
  Iterable<_i3.WebDavStdResource> takeWhile(
          bool Function(_i3.WebDavStdResource)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #takeWhile,
          [test],
        ),
        returnValue: <_i3.WebDavStdResource>[],
      ) as Iterable<_i3.WebDavStdResource>);

  @override
  Iterable<_i3.WebDavStdResource> skip(int? count) => (super.noSuchMethod(
        Invocation.method(
          #skip,
          [count],
        ),
        returnValue: <_i3.WebDavStdResource>[],
      ) as Iterable<_i3.WebDavStdResource>);

  @override
  Iterable<_i3.WebDavStdResource> skipWhile(
          bool Function(_i3.WebDavStdResource)? test) =>
      (super.noSuchMethod(
        Invocation.method(
          #skipWhile,
          [test],
        ),
        returnValue: <_i3.WebDavStdResource>[],
      ) as Iterable<_i3.WebDavStdResource>);

  @override
  _i3.WebDavStdResource firstWhere(
    bool Function(_i3.WebDavStdResource)? test, {
    _i3.WebDavStdResource Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #firstWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeWebDavStdResource_2(
          this,
          Invocation.method(
            #firstWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i3.WebDavStdResource);

  @override
  _i3.WebDavStdResource lastWhere(
    bool Function(_i3.WebDavStdResource)? test, {
    _i3.WebDavStdResource Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #lastWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeWebDavStdResource_2(
          this,
          Invocation.method(
            #lastWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i3.WebDavStdResource);

  @override
  _i3.WebDavStdResource singleWhere(
    bool Function(_i3.WebDavStdResource)? test, {
    _i3.WebDavStdResource Function()? orElse,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #singleWhere,
          [test],
          {#orElse: orElse},
        ),
        returnValue: _FakeWebDavStdResource_2(
          this,
          Invocation.method(
            #singleWhere,
            [test],
            {#orElse: orElse},
          ),
        ),
      ) as _i3.WebDavStdResource);

  @override
  _i3.WebDavStdResource elementAt(int? index) => (super.noSuchMethod(
        Invocation.method(
          #elementAt,
          [index],
        ),
        returnValue: _FakeWebDavStdResource_2(
          this,
          Invocation.method(
            #elementAt,
            [index],
          ),
        ),
      ) as _i3.WebDavStdResource);
}

/// A class which mocks [WebDavStdResourceProp].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDavStdResourceProp<V> extends _i1.Mock
    implements _i3.WebDavStdResourceProp<V> {
  MockWebDavStdResourceProp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  int get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: 0,
      ) as int);

  @override
  String toDebugString() => (super.noSuchMethod(
        Invocation.method(
          #toDebugString,
          [],
        ),
        returnValue: _i9.dummyValue<String>(
          this,
          Invocation.method(
            #toDebugString,
            [],
          ),
        ),
      ) as String);
}

/// A class which mocks [ResponseResultParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseResultParser<
        O extends _i7.WebDavResponseResultView<_i3.WebDavStdResource>>
    extends _i1.Mock implements _i10.ResponseResultParser<O> {
  MockResponseResultParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  O convert(_i10.ResponseResultParserParam? input) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: _i9.dummyValue<O>(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
      ) as O);

  @override
  _i2.Converter<_i10.ResponseResultParserParam, TT> fuse<TT>(
          _i2.Converter<O, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i10.ResponseResultParserParam, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i10.ResponseResultParserParam, TT>);

  @override
  Sink<_i10.ResponseResultParserParam> startChunkedConversion(Sink<O>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_3<_i10.ResponseResultParserParam>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i10.ResponseResultParserParam>);

  @override
  _i11.Stream<O> bind(_i11.Stream<_i10.ResponseResultParserParam>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i11.Stream<O>.empty(),
      ) as _i11.Stream<O>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [MultiStatusElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockMultiStatusElementParser extends _i1.Mock
    implements _i10.MultiStatusElementParser {
  MockMultiStatusElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.WebDavResponseResultView<_i3.WebDavStdResource>? convert(
          _i5.XmlElement? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as _i7.WebDavResponseResultView<_i3.WebDavStdResource>?);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i2.Converter<_i7.WebDavResponseResultView<_i3.WebDavStdResource>?,
                  TT>?
              other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(
          Sink<_i7.WebDavResponseResultView<_i3.WebDavStdResource>?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_3<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i11.Stream<_i7.WebDavResponseResultView<_i3.WebDavStdResource>?> bind(
          _i11.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i11.Stream<
            _i7.WebDavResponseResultView<_i3.WebDavStdResource>?>.empty(),
      ) as _i11.Stream<_i7.WebDavResponseResultView<_i3.WebDavStdResource>?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [PropstatElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropstatElementParser extends _i1.Mock
    implements _i10.PropstatElementParser {
  MockPropstatElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i3.WebDavStdResourceProp<dynamic>> convert(
          ({_i5.XmlElement node, _i3.WebDavStdResource resource})? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: <_i3.WebDavStdResourceProp<dynamic>>[],
      ) as Iterable<_i3.WebDavStdResourceProp<dynamic>>);

  @override
  _i2.Converter<({_i5.XmlElement node, _i3.WebDavStdResource resource}), TT>
      fuse<TT>(
              _i2.Converter<Iterable<_i3.WebDavStdResourceProp<dynamic>>, TT>?
                  other) =>
          (super.noSuchMethod(
            Invocation.method(
              #fuse,
              [other],
            ),
            returnValue: _FakeConverter_0<
                ({_i5.XmlElement node, _i3.WebDavStdResource resource}), TT>(
              this,
              Invocation.method(
                #fuse,
                [other],
              ),
            ),
          ) as _i2.Converter<
              ({_i5.XmlElement node, _i3.WebDavStdResource resource}), TT>);

  @override
  Sink<({_i5.XmlElement node, _i3.WebDavStdResource resource})>
      startChunkedConversion(
              Sink<Iterable<_i3.WebDavStdResourceProp<dynamic>>>? sink) =>
          (super.noSuchMethod(
            Invocation.method(
              #startChunkedConversion,
              [sink],
            ),
            returnValue: _FakeSink_3<
                ({_i5.XmlElement node, _i3.WebDavStdResource resource})>(
              this,
              Invocation.method(
                #startChunkedConversion,
                [sink],
              ),
            ),
          ) as Sink<({_i5.XmlElement node, _i3.WebDavStdResource resource})>);

  @override
  _i11.Stream<Iterable<_i3.WebDavStdResourceProp<dynamic>>> bind(
          _i11.Stream<({_i5.XmlElement node, _i3.WebDavStdResource resource})>?
              stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue:
            _i11.Stream<Iterable<_i3.WebDavStdResourceProp<dynamic>>>.empty(),
      ) as _i11.Stream<Iterable<_i3.WebDavStdResourceProp<dynamic>>>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [ResponseElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockResponseElementParser extends _i1.Mock
    implements _i10.ResponseElementParser {
  MockResponseElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<_i3.WebDavStdResource> convert(_i5.XmlElement? input) =>
      (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: <_i3.WebDavStdResource>[],
      ) as Iterable<_i3.WebDavStdResource>);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i2.Converter<Iterable<_i3.WebDavStdResource>, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(
          Sink<Iterable<_i3.WebDavStdResource>>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_3<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i11.Stream<Iterable<_i3.WebDavStdResource>> bind(
          _i11.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i11.Stream<Iterable<_i3.WebDavStdResource>>.empty(),
      ) as _i11.Stream<Iterable<_i3.WebDavStdResource>>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [ErrorElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorElementParser extends _i1.Mock
    implements _i10.ErrorElementParser {
  MockErrorElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WebDavStdResError? convert(_i5.XmlElement? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as _i6.WebDavStdResError?);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i2.Converter<_i6.WebDavStdResError?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(
          Sink<_i6.WebDavStdResError?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_3<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i11.Stream<_i6.WebDavStdResError?> bind(
          _i11.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i11.Stream<_i6.WebDavStdResError?>.empty(),
      ) as _i11.Stream<_i6.WebDavStdResError?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [PropElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropElementParser<T extends _i3.WebDavStdResourceProp<dynamic>>
    extends _i1.Mock implements _i10.PropElementParser<T> {
  MockPropElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T? convert(
          ({
            String? desc,
            _i6.WebDavStdResError? error,
            _i5.XmlElement node,
            int status
          })? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as T?);

  @override
  _i2.Converter<
          ({String? desc, _i6.WebDavStdResError? error, _i5.XmlElement node, int status}), TT>
      fuse<TT>(_i2.Converter<T?, TT>? other) => (super.noSuchMethod(
            Invocation.method(
              #fuse,
              [other],
            ),
            returnValue: _FakeConverter_0<
                ({
                  String? desc,
                  _i6.WebDavStdResError? error,
                  _i5.XmlElement node,
                  int status
                }),
                TT>(
              this,
              Invocation.method(
                #fuse,
                [other],
              ),
            ),
          ) as _i2.Converter<
              ({
                String? desc,
                _i6.WebDavStdResError? error,
                _i5.XmlElement node,
                int status
              }),
              TT>);

  @override
  Sink<({String? desc, _i6.WebDavStdResError? error, _i5.XmlElement node, int status})>
      startChunkedConversion(Sink<T?>? sink) => (super.noSuchMethod(
            Invocation.method(
              #startChunkedConversion,
              [sink],
            ),
            returnValue: _FakeSink_3<
                ({
                  String? desc,
                  _i6.WebDavStdResError? error,
                  _i5.XmlElement node,
                  int status
                })>(
              this,
              Invocation.method(
                #startChunkedConversion,
                [sink],
              ),
            ),
          ) as Sink<
              ({
                String? desc,
                _i6.WebDavStdResError? error,
                _i5.XmlElement node,
                int status
              })>);

  @override
  _i11.Stream<T?> bind(
          _i11.Stream<
                  ({
                    String? desc,
                    _i6.WebDavStdResError? error,
                    _i5.XmlElement node,
                    int status
                  })>?
              stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i11.Stream<T?>.empty(),
      ) as _i11.Stream<T?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [HttpHeaders].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpHeaders extends _i1.Mock implements _i12.HttpHeaders {
  MockHttpHeaders() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set date(DateTime? _date) => super.noSuchMethod(
        Invocation.setter(
          #date,
          _date,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set expires(DateTime? _expires) => super.noSuchMethod(
        Invocation.setter(
          #expires,
          _expires,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set ifModifiedSince(DateTime? _ifModifiedSince) => super.noSuchMethod(
        Invocation.setter(
          #ifModifiedSince,
          _ifModifiedSince,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set host(String? _host) => super.noSuchMethod(
        Invocation.setter(
          #host,
          _host,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set port(int? _port) => super.noSuchMethod(
        Invocation.setter(
          #port,
          _port,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set contentType(_i12.ContentType? _contentType) => super.noSuchMethod(
        Invocation.setter(
          #contentType,
          _contentType,
        ),
        returnValueForMissingStub: null,
      );

  @override
  int get contentLength => (super.noSuchMethod(
        Invocation.getter(#contentLength),
        returnValue: 0,
      ) as int);

  @override
  set contentLength(int? _contentLength) => super.noSuchMethod(
        Invocation.setter(
          #contentLength,
          _contentLength,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get persistentConnection => (super.noSuchMethod(
        Invocation.getter(#persistentConnection),
        returnValue: false,
      ) as bool);

  @override
  set persistentConnection(bool? _persistentConnection) => super.noSuchMethod(
        Invocation.setter(
          #persistentConnection,
          _persistentConnection,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get chunkedTransferEncoding => (super.noSuchMethod(
        Invocation.getter(#chunkedTransferEncoding),
        returnValue: false,
      ) as bool);

  @override
  set chunkedTransferEncoding(bool? _chunkedTransferEncoding) =>
      super.noSuchMethod(
        Invocation.setter(
          #chunkedTransferEncoding,
          _chunkedTransferEncoding,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<String>? operator [](String? name) =>
      (super.noSuchMethod(Invocation.method(
        #[],
        [name],
      )) as List<String>?);

  @override
  String? value(String? name) => (super.noSuchMethod(Invocation.method(
        #value,
        [name],
      )) as String?);

  @override
  void add(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #add,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void set(
    String? name,
    Object? value, {
    bool? preserveHeaderCase = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #set,
          [
            name,
            value,
          ],
          {#preserveHeaderCase: preserveHeaderCase},
        ),
        returnValueForMissingStub: null,
      );

  @override
  void remove(
    String? name,
    Object? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #remove,
          [
            name,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeAll(String? name) => super.noSuchMethod(
        Invocation.method(
          #removeAll,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void forEach(
          void Function(
            String,
            List<String>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void noFolding(String? name) => super.noSuchMethod(
        Invocation.method(
          #noFolding,
          [name],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
