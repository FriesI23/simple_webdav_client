// Mocks generated by Mockito 5.4.4 from annotations
// in simple_webdav_client/test/unit_test/std_test/parser_test/propstat_parser_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;
import 'dart:convert' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:simple_webdav_client/src/_std/error.dart' as _i6;
import 'package:simple_webdav_client/src/_std/parser.dart' as _i3;
import 'package:simple_webdav_client/src/_std/parser_mgr.dart' as _i8;
import 'package:simple_webdav_client/src/_std/resource.dart' as _i7;
import 'package:simple_webdav_client/src/response.dart' as _i9;
import 'package:xml/src/xml/nodes/element.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConverter_0<S, T> extends _i1.SmartFake
    implements _i2.Converter<S, T> {
  _FakeConverter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_1<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HttpStatusElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpStatusElementParser extends _i1.Mock
    implements _i3.HttpStatusElementParser {
  MockHttpStatusElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int? convert(_i4.XmlElement? input) => (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as int?);

  @override
  _i2.Converter<_i4.XmlElement, TT> fuse<TT>(_i2.Converter<int?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i4.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i4.XmlElement, TT>);

  @override
  Sink<_i4.XmlElement> startChunkedConversion(Sink<int?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<_i4.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i4.XmlElement>);

  @override
  _i5.Stream<int?> bind(_i5.Stream<_i4.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i5.Stream<int?>.empty(),
      ) as _i5.Stream<int?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [ErrorElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockErrorElementParser extends _i1.Mock
    implements _i3.ErrorElementParser {
  MockErrorElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.WebDavStdResError? convert(_i4.XmlElement? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as _i6.WebDavStdResError?);

  @override
  _i2.Converter<_i4.XmlElement, TT> fuse<TT>(
          _i2.Converter<_i6.WebDavStdResError?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i4.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i4.XmlElement, TT>);

  @override
  Sink<_i4.XmlElement> startChunkedConversion(
          Sink<_i6.WebDavStdResError?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<_i4.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i4.XmlElement>);

  @override
  _i5.Stream<_i6.WebDavStdResError?> bind(_i5.Stream<_i4.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i5.Stream<_i6.WebDavStdResError?>.empty(),
      ) as _i5.Stream<_i6.WebDavStdResError?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [PropElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockPropElementParser<T extends _i7.WebDavStdResourceProp<dynamic>>
    extends _i1.Mock implements _i3.PropElementParser<T> {
  MockPropElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T? convert(
          ({
            String? desc,
            _i6.WebDavStdResError? error,
            _i4.XmlElement node,
            int status
          })? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as T?);

  @override
  _i2.Converter<
          ({String? desc, _i6.WebDavStdResError? error, _i4.XmlElement node, int status}), TT>
      fuse<TT>(_i2.Converter<T?, TT>? other) => (super.noSuchMethod(
            Invocation.method(
              #fuse,
              [other],
            ),
            returnValue: _FakeConverter_0<
                ({
                  String? desc,
                  _i6.WebDavStdResError? error,
                  _i4.XmlElement node,
                  int status
                }),
                TT>(
              this,
              Invocation.method(
                #fuse,
                [other],
              ),
            ),
          ) as _i2.Converter<
              ({
                String? desc,
                _i6.WebDavStdResError? error,
                _i4.XmlElement node,
                int status
              }),
              TT>);

  @override
  Sink<({String? desc, _i6.WebDavStdResError? error, _i4.XmlElement node, int status})>
      startChunkedConversion(Sink<T?>? sink) => (super.noSuchMethod(
            Invocation.method(
              #startChunkedConversion,
              [sink],
            ),
            returnValue: _FakeSink_1<
                ({
                  String? desc,
                  _i6.WebDavStdResError? error,
                  _i4.XmlElement node,
                  int status
                })>(
              this,
              Invocation.method(
                #startChunkedConversion,
                [sink],
              ),
            ),
          ) as Sink<
              ({
                String? desc,
                _i6.WebDavStdResError? error,
                _i4.XmlElement node,
                int status
              })>);

  @override
  _i5.Stream<T?> bind(
          _i5.Stream<
                  ({
                    String? desc,
                    _i6.WebDavStdResError? error,
                    _i4.XmlElement node,
                    int status
                  })>?
              stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i5.Stream<T?>.empty(),
      ) as _i5.Stream<T?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [WebDavResposneDataParserManger].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDavResposneDataParserManger extends _i1.Mock
    implements _i8.WebDavResposneDataParserManger {
  MockWebDavResposneDataParserManger() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<({String name, String? ns})> get keys => (super.noSuchMethod(
        Invocation.getter(#keys),
        returnValue: <({String name, String? ns})>[],
      ) as Iterable<({String name, String? ns})>);

  @override
  set error(_i2.Converter<_i4.XmlElement, _i6.WebDavStdResError?>? parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #error,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set propstat(
          _i2.Converter<({_i4.XmlElement node, _i7.WebDavStdResource resource}),
                  Iterable<_i7.WebDavStdResourceProp<dynamic>>>?
              parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #propstat,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set response(
          _i2.Converter<_i4.XmlElement, Iterable<_i7.WebDavStdResource>>?
              parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #response,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set multistatus(
          _i2.Converter<_i4.XmlElement,
                  _i9.WebDavResponseResultView<_i7.WebDavStdResource>?>?
              parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #multistatus,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set href(_i2.Converter<_i4.XmlElement, Uri?>? parser) => super.noSuchMethod(
        Invocation.setter(
          #href,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set location(_i2.Converter<_i4.XmlElement, Uri?>? parser) =>
      super.noSuchMethod(
        Invocation.setter(
          #location,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set status(_i2.Converter<_i4.XmlElement, int?>? parser) => super.noSuchMethod(
        Invocation.setter(
          #status,
          parser,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Iterable<
      MapEntry<({String name, String? ns}),
          _i2.Converter<dynamic, dynamic>>> get entries => (super.noSuchMethod(
        Invocation.getter(#entries),
        returnValue: <MapEntry<({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>>>[],
      ) as Iterable<
          MapEntry<({String name, String? ns}),
              _i2.Converter<dynamic, dynamic>>>);

  @override
  int get length => (super.noSuchMethod(
        Invocation.getter(#length),
        returnValue: 0,
      ) as int);

  @override
  bool get isEmpty => (super.noSuchMethod(
        Invocation.getter(#isEmpty),
        returnValue: false,
      ) as bool);

  @override
  bool get isNotEmpty => (super.noSuchMethod(
        Invocation.getter(#isNotEmpty),
        returnValue: false,
      ) as bool);

  @override
  Iterable<_i2.Converter<dynamic, dynamic>> get values => (super.noSuchMethod(
        Invocation.getter(#values),
        returnValue: <_i2.Converter<dynamic, dynamic>>[],
      ) as Iterable<_i2.Converter<dynamic, dynamic>>);

  @override
  void operator []=(
    ({String name, String? ns})? key,
    _i2.Converter<dynamic, dynamic>? value,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #[]=,
          [
            key,
            value,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i2.Converter<
      ({
        String? desc,
        _i6.WebDavStdResError? error,
        _i4.XmlElement node,
        int status
      }),
      T?>? fetchPropParser<T extends _i7.WebDavStdResourceProp<dynamic>>(
    String? name,
    String? namespace,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #fetchPropParser,
        [
          name,
          namespace,
        ],
      )) as _i2.Converter<
          ({
            String? desc,
            _i6.WebDavStdResError? error,
            _i4.XmlElement node,
            int status
          }),
          T?>?);

  @override
  Map<RK, RV> cast<RK, RV>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: <RK, RV>{},
      ) as Map<RK, RV>);

  @override
  void forEach(
          void Function(
            ({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>,
          )? action) =>
      super.noSuchMethod(
        Invocation.method(
          #forEach,
          [action],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addAll(
          Map<({String name, String? ns}), _i2.Converter<dynamic, dynamic>>?
              other) =>
      super.noSuchMethod(
        Invocation.method(
          #addAll,
          [other],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsValue(Object? value) => (super.noSuchMethod(
        Invocation.method(
          #containsValue,
          [value],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.Converter<dynamic, dynamic> putIfAbsent(
    ({String name, String? ns})? key,
    _i2.Converter<dynamic, dynamic> Function()? ifAbsent,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #putIfAbsent,
          [
            key,
            ifAbsent,
          ],
        ),
        returnValue: _FakeConverter_0<dynamic, dynamic>(
          this,
          Invocation.method(
            #putIfAbsent,
            [
              key,
              ifAbsent,
            ],
          ),
        ),
      ) as _i2.Converter<dynamic, dynamic>);

  @override
  _i2.Converter<dynamic, dynamic> update(
    ({String name, String? ns})? key,
    _i2.Converter<dynamic, dynamic> Function(_i2.Converter<dynamic, dynamic>)?
        update, {
    _i2.Converter<dynamic, dynamic> Function()? ifAbsent,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #update,
          [
            key,
            update,
          ],
          {#ifAbsent: ifAbsent},
        ),
        returnValue: _FakeConverter_0<dynamic, dynamic>(
          this,
          Invocation.method(
            #update,
            [
              key,
              update,
            ],
            {#ifAbsent: ifAbsent},
          ),
        ),
      ) as _i2.Converter<dynamic, dynamic>);

  @override
  void updateAll(
          _i2.Converter<dynamic, dynamic> Function(
            ({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>,
          )? update) =>
      super.noSuchMethod(
        Invocation.method(
          #updateAll,
          [update],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<K2, V2> map<K2, V2>(
          MapEntry<K2, V2> Function(
            ({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>,
          )? transform) =>
      (super.noSuchMethod(
        Invocation.method(
          #map,
          [transform],
        ),
        returnValue: <K2, V2>{},
      ) as Map<K2, V2>);

  @override
  void addEntries(
          Iterable<
                  MapEntry<({String name, String? ns}),
                      _i2.Converter<dynamic, dynamic>>>?
              newEntries) =>
      super.noSuchMethod(
        Invocation.method(
          #addEntries,
          [newEntries],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeWhere(
          bool Function(
            ({String name, String? ns}),
            _i2.Converter<dynamic, dynamic>,
          )? test) =>
      super.noSuchMethod(
        Invocation.method(
          #removeWhere,
          [test],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool containsKey(Object? key) => (super.noSuchMethod(
        Invocation.method(
          #containsKey,
          [key],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [WebDavStdResourceProp].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebDavStdResourceProp<V> extends _i1.Mock
    implements _i7.WebDavStdResourceProp<V> {
  MockWebDavStdResourceProp() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name => (super.noSuchMethod(
        Invocation.getter(#name),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.getter(#name),
        ),
      ) as String);

  @override
  int get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: 0,
      ) as int);

  @override
  String toDebugString() => (super.noSuchMethod(
        Invocation.method(
          #toDebugString,
          [],
        ),
        returnValue: _i10.dummyValue<String>(
          this,
          Invocation.method(
            #toDebugString,
            [],
          ),
        ),
      ) as String);
}
