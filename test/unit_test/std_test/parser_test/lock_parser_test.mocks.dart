// Mocks generated by Mockito 5.4.4 from annotations
// in simple_webdav_client/test/unit_test/std_test/parser_test/lock_parser_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i2;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;
import 'package:simple_webdav_client/src/_std/depth.dart' as _i8;
import 'package:simple_webdav_client/src/_std/parser.dart' as _i3;
import 'package:simple_webdav_client/src/_std/prop.dart' as _i4;
import 'package:xml/src/xml/nodes/element.dart' as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeConverter_0<S, T> extends _i1.SmartFake
    implements _i2.Converter<S, T> {
  _FakeConverter_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSink_1<T> extends _i1.SmartFake implements Sink<T> {
  _FakeSink_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LockScopeElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLockScopeElementParser extends _i1.Mock
    implements _i3.LockScopeElementParser {
  MockLockScopeElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LockScope? convert(_i5.XmlElement? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as _i4.LockScope?);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i2.Converter<_i4.LockScope?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(Sink<_i4.LockScope?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i6.Stream<_i4.LockScope?> bind(_i6.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<_i4.LockScope?>.empty(),
      ) as _i6.Stream<_i4.LockScope?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [WriteLockElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockWriteLockElementParser extends _i1.Mock
    implements _i3.WriteLockElementParser {
  MockWriteLockElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool? convert(_i5.XmlElement? input) => (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as bool?);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(_i2.Converter<bool?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(Sink<bool?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i6.Stream<bool?> bind(_i6.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<bool?>.empty(),
      ) as _i6.Stream<bool?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [LockEntryElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockLockEntryElementParser extends _i1.Mock
    implements _i3.LockEntryElementParser {
  MockLockEntryElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LockEntry? convert(_i5.XmlElement? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as _i4.LockEntry?);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i2.Converter<_i4.LockEntry?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(Sink<_i4.LockEntry?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i6.Stream<_i4.LockEntry?> bind(_i6.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<_i4.LockEntry?>.empty(),
      ) as _i6.Stream<_i4.LockEntry?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [ActiveLockElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveLockElementParser<O> extends _i1.Mock
    implements _i3.ActiveLockElementParser<O> {
  MockActiveLockElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ActiveLock<O>? convert(_i5.XmlElement? input) =>
      (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as _i4.ActiveLock<O>?);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(
          _i2.Converter<_i4.ActiveLock<O>?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(Sink<_i4.ActiveLock<O>?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i6.Stream<_i4.ActiveLock<O>?> bind(_i6.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<_i4.ActiveLock<O>?>.empty(),
      ) as _i6.Stream<_i4.ActiveLock<O>?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [NestedHrefElementParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockNestedHrefElementParser extends _i1.Mock
    implements _i3.NestedHrefElementParser {
  MockNestedHrefElementParser() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Uri? convert(_i5.XmlElement? input) => (super.noSuchMethod(Invocation.method(
        #convert,
        [input],
      )) as Uri?);

  @override
  _i2.Converter<_i5.XmlElement, TT> fuse<TT>(_i2.Converter<Uri?, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<_i5.XmlElement, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<_i5.XmlElement, TT>);

  @override
  Sink<_i5.XmlElement> startChunkedConversion(Sink<Uri?>? sink) =>
      (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<_i5.XmlElement>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<_i5.XmlElement>);

  @override
  _i6.Stream<Uri?> bind(_i6.Stream<_i5.XmlElement>? stream) =>
      (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<Uri?>.empty(),
      ) as _i6.Stream<Uri?>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [Converter].
///
/// See the documentation for Mockito's code generation for more information.
class MockConverter<S, T> extends _i1.Mock implements _i2.Converter<S, T> {
  MockConverter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  T convert(S? input) => (super.noSuchMethod(
        Invocation.method(
          #convert,
          [input],
        ),
        returnValue: _i7.dummyValue<T>(
          this,
          Invocation.method(
            #convert,
            [input],
          ),
        ),
      ) as T);

  @override
  _i2.Converter<S, TT> fuse<TT>(_i2.Converter<T, TT>? other) =>
      (super.noSuchMethod(
        Invocation.method(
          #fuse,
          [other],
        ),
        returnValue: _FakeConverter_0<S, TT>(
          this,
          Invocation.method(
            #fuse,
            [other],
          ),
        ),
      ) as _i2.Converter<S, TT>);

  @override
  Sink<S> startChunkedConversion(Sink<T>? sink) => (super.noSuchMethod(
        Invocation.method(
          #startChunkedConversion,
          [sink],
        ),
        returnValue: _FakeSink_1<S>(
          this,
          Invocation.method(
            #startChunkedConversion,
            [sink],
          ),
        ),
      ) as Sink<S>);

  @override
  _i6.Stream<T> bind(_i6.Stream<S>? stream) => (super.noSuchMethod(
        Invocation.method(
          #bind,
          [stream],
        ),
        returnValue: _i6.Stream<T>.empty(),
      ) as _i6.Stream<T>);

  @override
  _i2.Converter<RS, RT> cast<RS, RT>() => (super.noSuchMethod(
        Invocation.method(
          #cast,
          [],
        ),
        returnValue: _FakeConverter_0<RS, RT>(
          this,
          Invocation.method(
            #cast,
            [],
          ),
        ),
      ) as _i2.Converter<RS, RT>);
}

/// A class which mocks [ActiveLock].
///
/// See the documentation for Mockito's code generation for more information.
class MockActiveLock<O> extends _i1.Mock implements _i4.ActiveLock<O> {
  MockActiveLock() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LockScope get lockScope => (super.noSuchMethod(
        Invocation.getter(#lockScope),
        returnValue: _i4.LockScope.exclusive,
      ) as _i4.LockScope);

  @override
  bool get isWriteLock => (super.noSuchMethod(
        Invocation.getter(#isWriteLock),
        returnValue: false,
      ) as bool);

  @override
  _i8.Depth get depth => (super.noSuchMethod(
        Invocation.getter(#depth),
        returnValue: _i8.Depth.resource,
      ) as _i8.Depth);
}

/// A class which mocks [LockEntry].
///
/// See the documentation for Mockito's code generation for more information.
class MockLockEntry extends _i1.Mock implements _i4.LockEntry {
  MockLockEntry() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.LockScope get lockScope => (super.noSuchMethod(
        Invocation.getter(#lockScope),
        returnValue: _i4.LockScope.exclusive,
      ) as _i4.LockScope);

  @override
  bool get isWriteLock => (super.noSuchMethod(
        Invocation.getter(#isWriteLock),
        returnValue: false,
      ) as bool);
}
